{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _objectWithoutProperties from \"/home/luma/www/nlw4/moveit-next/moveit2/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nvar _jsxFileName = \"/home/luma/www/nlw4/moveit-next/moveit2/src/contexts/ChallengesContext.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState, useEffect } from 'react';\nimport Cookies from 'js-cookie';\nimport challenges from '../../challenges.json';\nexport var ChallengesContext = /*#__PURE__*/createContext({});\nexport function ChallengesProvider(_ref) {\n  _s();\n\n  var _rest$level, _rest$currentExperien, _rest$challengesCompl;\n\n  var children = _ref.children,\n      rest = _objectWithoutProperties(_ref, [\"children\"]);\n\n  var _useState = useState((_rest$level = rest.level) !== null && _rest$level !== void 0 ? _rest$level : 1),\n      level = _useState[0],\n      setLevel = _useState[1];\n\n  var _useState2 = useState((_rest$currentExperien = rest.currentExperience) !== null && _rest$currentExperien !== void 0 ? _rest$currentExperien : 0),\n      currentExperience = _useState2[0],\n      setCurrentExperience = _useState2[1];\n\n  var _useState3 = useState((_rest$challengesCompl = rest.challengesCompleted) !== null && _rest$challengesCompl !== void 0 ? _rest$challengesCompl : 0),\n      challengesCompleted = _useState3[0],\n      setChallengesCompleted = _useState3[1];\n\n  var _useState4 = useState(null),\n      activeChallenge = _useState4[0],\n      setActiveChallenge = _useState4[1];\n\n  var experienceToNextLevel = Math.pow((level + 1) * 4, 2); // O use effect com o segundo parametro com um array vazio significa que essa funÃ§Ã£o\n  //vai acontecer somente uma vez, quando esse componente for carregado em tela\n\n  useEffect(function () {\n    Notification.requestPermission();\n  }, []); //yarn add js-cookie\n\n  useEffect(function () {\n    Cookies.set('level', String(level));\n    Cookies.set('currentExperience', String(currentExperience));\n    Cookies.set('challengesCompleted', String(challengesCompleted));\n  }, [level, currentExperience, challengesCompleted]);\n\n  function levelUp() {\n    setLevel(level + 1);\n  }\n\n  function startNewChallenge() {\n    var randomChallengeIndex = Math.floor(Math.random() * challenges.length);\n    var challenge = challenges[randomChallengeIndex];\n    setActiveChallenge(challenge);\n    new Audio('/notification.mp3').play();\n\n    if (Notification.permission === 'granted') {\n      new Notification('Novo desafio ðŸ˜¤'), {\n        body: \"Valendo \".concat(challenge.amount, \"xp!\")\n      };\n    }\n  }\n\n  function resetChallenge() {\n    setActiveChallenge(null);\n  }\n\n  function completeChallenge() {\n    if (!activeChallenge) {\n      return;\n    }\n\n    var amount = activeChallenge.amount;\n    var finalExperience = currentExperience + amount;\n\n    if (finalExperience >= experienceToNextLevel) {\n      finalExperience = finalExperience - experienceToNextLevel;\n      levelUp();\n    }\n\n    setCurrentExperience(finalExperience);\n    setActiveChallenge(null);\n    setChallengesCompleted(challengesCompleted + 1);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ChallengesContext.Provider, {\n    value: {\n      level: level,\n      currentExperience: currentExperience,\n      challengesCompleted: challengesCompleted,\n      levelUp: levelUp,\n      startNewChallenge: startNewChallenge,\n      activeChallenge: activeChallenge,\n      resetChallenge: resetChallenge,\n      completeChallenge: completeChallenge,\n      experienceToNextLevel: experienceToNextLevel\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ChallengesProvider, \"PZRNAQxmWG+H98k5/z4/rAa2mqw=\");\n\n_c = ChallengesProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChallengesProvider\");","map":{"version":3,"sources":["/home/luma/www/nlw4/moveit-next/moveit2/src/contexts/ChallengesContext.tsx"],"names":["createContext","useState","useEffect","Cookies","challenges","ChallengesContext","ChallengesProvider","children","rest","level","setLevel","currentExperience","setCurrentExperience","challengesCompleted","setChallengesCompleted","activeChallenge","setActiveChallenge","experienceToNextLevel","Math","pow","Notification","requestPermission","set","String","levelUp","startNewChallenge","randomChallengeIndex","floor","random","length","challenge","Audio","play","permission","body","amount","resetChallenge","completeChallenge","finalExperience"],"mappings":"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","sourcesContent":["import {  createContext, useState, ReactNode, useEffect  } from 'react';\nimport Cookies from 'js-cookie';\nimport challenges from '../../challenges.json';\n\ninterface Challenge {\n    type: 'body' | 'eye';\n    description: string;\n    amount: number;\n}\n\ninterface ChallengesContextData {\n    level: number;\n    currentExperience: number;\n    challengesCompleted: number;\n    experienceToNextLevel: number;\n    activeChallenge: Challenge;\n    startNewChallenge: () => void;\n    resetChallenge: () => void;\n    levelUp: () => void;\n    completeChallenge: () => void;\n}\n\n\ninterface ChallengesProviderProps {\n    children: ReactNode;\n    level: number;\n    currentExperience:  number;\n    challengesCompleted:  number;\n}\n\nexport const ChallengesContext = createContext({} as ChallengesContextData)\n\nexport function ChallengesProvider ({children,\n...rest} : ChallengesProviderProps) {\n    const [level, setLevel] = useState(rest.level ?? 1 );\n    const [ currentExperience, setCurrentExperience] = useState(rest.currentExperience ?? 0)\n    const [ challengesCompleted, setChallengesCompleted] = useState(rest.challengesCompleted ?? 0)\n\n    const [activeChallenge, setActiveChallenge] = useState(null)\n    \n    const experienceToNextLevel = Math.pow((level + 1 )* 4, 2)\n\n    // O use effect com o segundo parametro com um array vazio significa que essa funÃ§Ã£o\n    //vai acontecer somente uma vez, quando esse componente for carregado em tela\n    useEffect(() => {\n        Notification.requestPermission();\n    }, [])\n\n    //yarn add js-cookie\n    useEffect( () => {\n        Cookies.set('level', String(level));\n        Cookies.set('currentExperience', String(currentExperience));\n        Cookies.set('challengesCompleted', String(challengesCompleted));\n    }, [level, currentExperience,challengesCompleted])\n\n\n    function levelUp () {\n        setLevel(level +1)\n    }\n\n    function startNewChallenge() {\n        const randomChallengeIndex = Math.floor(Math.random() * challenges.length)\n        const challenge = challenges[randomChallengeIndex]\n\n        setActiveChallenge(challenge)\n\n        new Audio('/notification.mp3').play();\n\n        if(Notification.permission ==='granted') {\n            new Notification('Novo desafio ðŸ˜¤'),{\n                body: `Valendo ${challenge.amount}xp!`\n            }\n        }\n    }\n\n    function resetChallenge() {\n        setActiveChallenge(null)\n    }\n\n    function completeChallenge() {\n        if(!activeChallenge) {\n            return\n        }\n\n        const { amount } = activeChallenge;\n        let finalExperience = currentExperience + amount;\n\n        if(finalExperience >= experienceToNextLevel) {\n            finalExperience = finalExperience - experienceToNextLevel;\n            levelUp()\n        }\n\n        setCurrentExperience(finalExperience);\n        setActiveChallenge(null);\n        setChallengesCompleted(challengesCompleted +1);\n    }\n\n    return (\n        <ChallengesContext.Provider \n        value={{\n            level, \n            currentExperience, \n            challengesCompleted,\n            levelUp,\n            startNewChallenge,\n            activeChallenge,\n            resetChallenge,\n            completeChallenge,\n            experienceToNextLevel,\n            }}>\n            {children}\n        </ChallengesContext.Provider>\n    )\n\n}"]},"metadata":{},"sourceType":"module"}