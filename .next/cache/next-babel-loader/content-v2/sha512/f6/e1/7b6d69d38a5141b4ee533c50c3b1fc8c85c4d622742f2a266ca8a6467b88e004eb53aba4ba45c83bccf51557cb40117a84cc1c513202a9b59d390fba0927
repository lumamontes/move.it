{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/luma/www/nlw4/moveit-next/moveit2/src/contexts/ChallengesContext.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState, useEffect } from 'react';\nimport challenges from '../../challenges.json';\nexport var ChallengesContext = /*#__PURE__*/createContext({});\nexport function ChallengesProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useState = useState(1),\n      level = _useState[0],\n      setLevel = _useState[1];\n\n  var _useState2 = useState(0),\n      currentExperience = _useState2[0],\n      setCurrentExperience = _useState2[1];\n\n  var _useState3 = useState(0),\n      challengesCompleted = _useState3[0],\n      setChallengesCompleted = _useState3[1];\n\n  var _useState4 = useState(null),\n      activeChallenge = _useState4[0],\n      setActiveChallenge = _useState4[1];\n\n  var experienceToNextLevel = Math.pow((level + 1) * 4, 2); // O use effect com o segundo parametro com um array vazio significa que essa funÃ§Ã£o\n  //vai acontecer somente uma vez, quando esse componente for carregado em tela\n\n  useEffect(function () {\n    Notification.requestPermission();\n  }, []);\n\n  function levelUp() {\n    setLevel(level + 1);\n  }\n\n  function startNewChallenge() {\n    var randomChallengeIndex = Math.floor(Math.random() * challenges.length);\n    var challenge = challenges[randomChallengeIndex];\n    setActiveChallenge(challenge);\n\n    if (Notification.permission === 'granted') {\n      new Notification('Novo desafio ðŸ˜¤'), {\n        body: \"Valend \".concat(challenge.amount, \"xp!\")\n      };\n    }\n  }\n\n  function resetChallenge() {\n    setActiveChallenge(null);\n  }\n\n  function completeChallenge() {\n    if (!activeChallenge) {\n      return;\n    }\n\n    var amount = activeChallenge.amount;\n    var finalExperience = currentExperience + amount;\n\n    if (finalExperience >= experienceToNextLevel) {\n      finalExperience = finalExperience - experienceToNextLevel;\n      levelUp();\n    }\n\n    setCurrentExperience(finalExperience);\n    setActiveChallenge(null);\n    setChallengesCompleted(challengesCompleted + 1);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ChallengesContext.Provider, {\n    value: {\n      level: level,\n      currentExperience: currentExperience,\n      challengesCompleted: challengesCompleted,\n      levelUp: levelUp,\n      startNewChallenge: startNewChallenge,\n      activeChallenge: activeChallenge,\n      resetChallenge: resetChallenge,\n      completeChallenge: completeChallenge,\n      experienceToNextLevel: experienceToNextLevel\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ChallengesProvider, \"jaDyrTTtCggk7qHy1rGyspsiy7g=\");\n\n_c = ChallengesProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChallengesProvider\");","map":{"version":3,"sources":["/home/luma/www/nlw4/moveit-next/moveit2/src/contexts/ChallengesContext.tsx"],"names":["createContext","useState","useEffect","challenges","ChallengesContext","ChallengesProvider","children","level","setLevel","currentExperience","setCurrentExperience","challengesCompleted","setChallengesCompleted","activeChallenge","setActiveChallenge","experienceToNextLevel","Math","pow","Notification","requestPermission","levelUp","startNewChallenge","randomChallengeIndex","floor","random","length","challenge","permission","body","amount","resetChallenge","completeChallenge","finalExperience"],"mappings":";;;;;AAAA,SAAUA,aAAV,EAAyBC,QAAzB,EAA8CC,SAA9C,QAAgE,OAAhE;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AAyBA,OAAO,IAAMC,iBAAiB,gBAAGJ,aAAa,CAAC,EAAD,CAAvC;AAEP,OAAO,SAASK,kBAAT,OAAmE;AAAA;;AAAA,MAArCC,QAAqC,QAArCA,QAAqC;;AAAA,kBAC5CL,QAAQ,CAAC,CAAD,CADoC;AAAA,MAC/DM,KAD+D;AAAA,MACxDC,QADwD;;AAAA,mBAEnBP,QAAQ,CAAC,CAAD,CAFW;AAAA,MAE9DQ,iBAF8D;AAAA,MAE3CC,oBAF2C;;AAAA,mBAGfT,QAAQ,CAAC,CAAD,CAHO;AAAA,MAG9DU,mBAH8D;AAAA,MAGzCC,sBAHyC;;AAAA,mBAKxBX,QAAQ,CAAC,IAAD,CALgB;AAAA,MAK/DY,eAL+D;AAAA,MAK9CC,kBAL8C;;AAOtE,MAAMC,qBAAqB,GAAGC,IAAI,CAACC,GAAL,CAAS,CAACV,KAAK,GAAG,CAAT,IAAc,CAAvB,EAA0B,CAA1B,CAA9B,CAPsE,CAStE;AACA;;AACAL,EAAAA,SAAS,CAAC,YAAM;AACZgB,IAAAA,YAAY,CAACC,iBAAb;AACH,GAFQ,EAEN,EAFM,CAAT;;AAKA,WAASC,OAAT,GAAoB;AAChBZ,IAAAA,QAAQ,CAACD,KAAK,GAAE,CAAR,CAAR;AACH;;AAED,WAASc,iBAAT,GAA6B;AACzB,QAAMC,oBAAoB,GAAGN,IAAI,CAACO,KAAL,CAAWP,IAAI,CAACQ,MAAL,KAAgBrB,UAAU,CAACsB,MAAtC,CAA7B;AACA,QAAMC,SAAS,GAAGvB,UAAU,CAACmB,oBAAD,CAA5B;AAEAR,IAAAA,kBAAkB,CAACY,SAAD,CAAlB;;AAEA,QAAGR,YAAY,CAACS,UAAb,KAA2B,SAA9B,EAAyC;AACrC,UAAIT,YAAJ,CAAiB,iBAAjB,GAAoC;AAChCU,QAAAA,IAAI,mBAAYF,SAAS,CAACG,MAAtB;AAD4B,OAApC;AAGH;AACJ;;AAED,WAASC,cAAT,GAA0B;AACtBhB,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACH;;AAED,WAASiB,iBAAT,GAA6B;AACzB,QAAG,CAAClB,eAAJ,EAAqB;AACjB;AACH;;AAHwB,QAKjBgB,MALiB,GAKNhB,eALM,CAKjBgB,MALiB;AAMzB,QAAIG,eAAe,GAAGvB,iBAAiB,GAAGoB,MAA1C;;AAEA,QAAGG,eAAe,IAAIjB,qBAAtB,EAA6C;AACzCiB,MAAAA,eAAe,GAAGA,eAAe,GAAGjB,qBAApC;AACAK,MAAAA,OAAO;AACV;;AAEDV,IAAAA,oBAAoB,CAACsB,eAAD,CAApB;AACAlB,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACAF,IAAAA,sBAAsB,CAACD,mBAAmB,GAAE,CAAtB,CAAtB;AACH;;AAED,sBACI,QAAC,iBAAD,CAAmB,QAAnB;AACA,IAAA,KAAK,EAAE;AACHJ,MAAAA,KAAK,EAALA,KADG;AAEHE,MAAAA,iBAAiB,EAAjBA,iBAFG;AAGHE,MAAAA,mBAAmB,EAAnBA,mBAHG;AAIHS,MAAAA,OAAO,EAAPA,OAJG;AAKHC,MAAAA,iBAAiB,EAAjBA,iBALG;AAMHR,MAAAA,eAAe,EAAfA,eANG;AAOHiB,MAAAA,cAAc,EAAdA,cAPG;AAQHC,MAAAA,iBAAiB,EAAjBA,iBARG;AASHhB,MAAAA,qBAAqB,EAArBA;AATG,KADP;AAAA,cAYKT;AAZL;AAAA;AAAA;AAAA;AAAA,UADJ;AAiBH;;GAxEeD,kB;;KAAAA,kB","sourcesContent":["import {  createContext, useState, ReactNode, useEffect  } from 'react';\nimport challenges from '../../challenges.json';\n\ninterface Challenge {\n    type: 'body' | 'eye';\n    description: string;\n    amount: number;\n}\n\ninterface ChallengesContextData {\n    level: number;\n    currentExperience: number;\n    challengesCompleted: number;\n    experienceToNextLevel: number;\n    activeChallenge: Challenge;\n    startNewChallenge: () => void;\n    resetChallenge: () => void;\n    levelUp: () => void;\n    completeChallenge: () => void;\n}\n\n\ninterface ChallengesProviderProps {\n    children: ReactNode;\n}\n\nexport const ChallengesContext = createContext({} as ChallengesContextData)\n\nexport function ChallengesProvider ({children} : ChallengesProviderProps) {\n    const [level, setLevel] = useState(1);\n    const [ currentExperience, setCurrentExperience] = useState(0)\n    const [ challengesCompleted, setChallengesCompleted] = useState(0)\n\n    const [activeChallenge, setActiveChallenge] = useState(null)\n    \n    const experienceToNextLevel = Math.pow((level + 1 )* 4, 2)\n\n    // O use effect com o segundo parametro com um array vazio significa que essa funÃ§Ã£o\n    //vai acontecer somente uma vez, quando esse componente for carregado em tela\n    useEffect(() => {\n        Notification.requestPermission();\n    }, [])\n\n\n    function levelUp () {\n        setLevel(level +1)\n    }\n\n    function startNewChallenge() {\n        const randomChallengeIndex = Math.floor(Math.random() * challenges.length)\n        const challenge = challenges[randomChallengeIndex]\n\n        setActiveChallenge(challenge)\n\n        if(Notification.permission ==='granted') {\n            new Notification('Novo desafio ðŸ˜¤'),{\n                body: `Valend ${challenge.amount}xp!`\n            }\n        }\n    }\n\n    function resetChallenge() {\n        setActiveChallenge(null)\n    }\n\n    function completeChallenge() {\n        if(!activeChallenge) {\n            return\n        }\n\n        const { amount } = activeChallenge;\n        let finalExperience = currentExperience + amount;\n\n        if(finalExperience >= experienceToNextLevel) {\n            finalExperience = finalExperience - experienceToNextLevel;\n            levelUp()\n        }\n\n        setCurrentExperience(finalExperience);\n        setActiveChallenge(null);\n        setChallengesCompleted(challengesCompleted +1);\n    }\n\n    return (\n        <ChallengesContext.Provider \n        value={{\n            level, \n            currentExperience, \n            challengesCompleted,\n            levelUp,\n            startNewChallenge,\n            activeChallenge,\n            resetChallenge,\n            completeChallenge,\n            experienceToNextLevel,\n            }}>\n            {children}\n        </ChallengesContext.Provider>\n    )\n\n}"]},"metadata":{},"sourceType":"module"}